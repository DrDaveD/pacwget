#!/bin/bash
# Wget wrapper to support Proxy Auto Config files, multiple proxies,
#   and round-robin server names.
# Requires wget, and pacparse command which is part of pacwget package
# Written by Dave Dykstra, March 2013
#
# pacwget is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# pacwget is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA


ME=pacwget

if [ $# = 0 ]; then
    echo "Usage: $ME [wget_options]" >&2
    echo >&2
    echo '$PAC_URLS is semicolon-separated list of URLs to read Proxy Auto Config' >&2
    echo '  files from if $HTTP_PROXIES and $http_proxy are not set.' >&2
    echo '  "auto" in the list is equivalent to http://wpad/wpad.dat and' >&2
    echo '  "DIRECT" at the end indicates direct connection to server.' >&2
    echo '  Default is "auto; DIRECT".' >&2
    echo '$HTTP_PROXIES is a semicolon-separated list of http proxy URLs'. >&2
    echo '  "DIRECT" at the end indicates direct connection to server.' >&2
    echo '$http_proxy is single http proxy URL.' >&2
    echo 'For http:// URLs, tries all proxies and servers until one succeeds,' >&2
    echo '   including round-robin DNS names.' >&2
    echo 'By default adds these wget options:' >&2
    echo '  --tries=1 --connect-timeout=5 --read-timeout=10' >&2
    echo 'Also adds wget -q when reading PAC URLs if -v or -d not given' >&2
    exit 1
fi

CONNECTTIMEOUT=""
READTIMEOUT=""
PREV_ARG=""
AHTTPURL=""
IPVERSION=""
PACPARSEDEBUG=""
PACWGETQUIET="-q"
for ARG; do
    case "$PREVARG" in
	-*T*)
	    CONNECTTIMEOUT="$ARG"
	    READTIMEOUT="$ARG"
	    next
	    ;;
    esac
    case "$ARG" in
	--connect-timeout=*)
	    CONNECTTIMEOUT=${ARG#*=}
	    ;;
	--read-timeout=*)
	    READTIMEOUT=${ARG#*=}
	    ;;
	--inet4-only|-4)
	    IPVERSION="-4"
	    ;;
	--inet6-only|-6)
	    IPVERSION="-6"
	    ;;
	--debug|-d)
	    PACPARSEDEBUG="-d"
	    PACWGETQUIET=""
	    ;;
	--verbose|-v)
	    PACWGETQUIET=""
	    ;;
	http://*)
	    if [ -z "$AHTTPURL" ]; then
		AHTTPURL="$ARG"
	    fi
	    ;;
    esac
done

PACWGETARGS="--tries=1 $PACWGETQUIET"
WGETARGS="--tries=1"
if [ -n "$CONNECTTIMEOUT" ]; then
    PACWGETARGS="$PACWGETARGS --connect-timeout=$CONNECTTIMEOUT"
else
    PACWGETARGS="$PACWGETARGS --connect-timeout=5"
    WGETARGS="$WGETARGS --connect-timeout=5"
fi
if [ -n "$READTIMEOUT" ]; then
    PACWGETARGS="$PACWGETARGS --read-timeout=$READTIMEOUT"
else
    PACWGETARGS="$PACWGETARGS --read-timeout=10"
    WGETARGS="$WGETARGS --read-timeout=10"
fi
if [ -n "$PACPARSEDEBUG" ]; then
    PACWGETARGS="$PACWGETARGS -d"
fi

if [ -z "$AHTTPURL" ]; then
    exec wget $WGETARGS "$@"
fi

if [ -n "$HTTP_PROXIES" ]; then
    PROXIES="${HTTP_PROXIES//;/ }"
elif [ -n "$http_proxy" ]; then
    PROXIES="$http_proxy"
else
    if [ -z "$PAC_URLS" ]; then
	PAC_URLS="auto; DIRECT"
    fi
    PACTMPFILE=`mktemp /tmp/pacwgetXXXXXXXXXX`
    trap "rm -f $PACTMPFILE" 0
    for PACURL in ${PAC_URLS//;/ }; do
	if [ "$PACURL" = "auto" ]; then
	    PACURL="http://wpad/wpad.dat"
	elif [ "$PACURL" = "DIRECT" ]; then
	    PROXIES="DIRECT"
	    break
	fi
	if [ -n "$PACPARSER_DEBUG" ]; then
	    echo "DEBUG: wgetting $PACURL"
	fi
	if wget $PACWGETARGS -O$PACTMPFILE $PACURL; then
	    if PROXYLIST="`pacparse $IPVERSION $PACPARSEDEBUG -p $PACTMPFILE -u "$AHTTPURL" -U "$PACURL"`"; then
		case "$PROXYLIST" in
		    "PROXY "*|"DIRECT")
			PROXIES="${PROXYLIST//PROXY /}"
			PROXIES="${PROXIES//;/ }"
			break
			;;
		esac
		echo "$ME: proxy auto config parse of $PACURL" >&2
		echo "  with URL $AHTTPURL" >&2
		echo "  did not return list starting with PROXY or DIRECT" >&2
		echo "  Instead it returned: $PROXYLIST" >&2
		exit 2
	    fi
	fi
    done
    if [ -z "$PROXIES" ]; then
	echo "$ME: no proxy found from PAC_URLS=\"$PAC_URLS\"" >&2
	exit 2
    fi
    rm -f $PACTMPFILE
    trap 0
fi

# Execute wget for each URL separately
# It would nice to be able to execute wget once for all URLs, but it sometimes
#  returns success even if one of the URLs fails.  Also, it never reuses a
#  connection to a proxy anyway so it doesn't make a huge difference.  At
#  least the list of proxies determined above can be reused
RET=0
for ARG; do
    case "$ARG" in
	http://*);;
	*://*)
	    wget $WGETARGS "$ARG"
	    RET=$?
	    if [ $RET = 0 ]; then
		continue
	    fi
	    break
	    ;;
	*)
	    WGETARGS="$WGETARGS $ARG"
	    continue
	    ;;
    esac

    # http:// -- try wget until one of the proxies suceeds
    for PROXY in $PROXIES; do
	if [ "$PROXY" = DIRECT ]; then
	    unset http_proxy
	else
	    export http_proxy="$PROXY"
	fi
	wget $WGETARGS "$ARG"
	RET=$?
	if [ $RET = 0 ]; then
	    break
	fi
	if [ "$PROXY" != DIRECT ]; then
	    # if using a proxy, and server has more than one address,
	    #  try individual addresses too if can find them, to make
	    #  sure all have been tried
	    AHOST="${AHTTPURL#http://}"
	    AHOST="${AHOST%%/*}"
	    AHOST="${AHOST%:*}"
	    IPS="`host $AHOST 2>/dev/null|sed -n "s/.* has address //p"`"
	    if [ `echo "$IPS"|wc -l` -lt 2 ]; then
		continue
	    fi
	    for IP in $IPS; do
		RET=0
		wget $WGETARGS "${ARG/$AHOST/$IP}"
		RET=$?
		if [ $RET = 0 ]; then
		    break
		fi
	    done
	    if [ $RET = 0 ]; then
		break
	    fi
	fi
	if [ $RET = 0 ]; then
	    break
	fi
    done
    if [ $RET != 0 ]; then
	echo "$ME: error getting $ARG" >&2
	echo "  with HTTP_PROXIES=${PROXIES// /; }" >&2
	break
    fi
done

exit $RET
